syntax = "proto3";

option csharp_namespace = "LPS.Protos.Shared";

package nodes;

// Node Type Enum
enum NodeType {
    UNKNOWN = 0;
    MASTER = 1;
    WORKER = 2;
}

// Node Status Enum
enum NodeStatus {
    STATUS_UNKNOWN = 0;
    PENDING = 1; 
    Ready = 2;
    RUNNING = 3;
    STOPPED = 4;
    FAILED = 5;
}

// Disk Info
message DiskInfo {
    string name = 1;
    string total_size = 2;
    string free_space = 3;
}

// Network Info
message NetworkInfo {
    string interface_name = 1;
    string type = 2;
    string status = 3;
    repeated string ip_addresses = 4;
}

message NodeMetadata {
    string node_name = 1;
    string node_ip = 2;
    NodeType node_type = 3;
    string os = 4;
    string architecture = 5;
    string framework = 6;
    string cpu = 7;
    int32 logical_processors = 8;
    string total_ram = 9;
    repeated DiskInfo disks = 10;
    repeated NetworkInfo network_interfaces = 11;
}

message RegisterNodeResponse {
    string message = 1;
}

// Master to Worker: Trigger Test
message TriggerTestRequest {
    // No fields needed; master signals worker to start local test
}

message TriggerTestResponse {
    NodeStatus status = 1;  // e.g., RUNNING if test started, FAILED if not
}

// Worker to Master: Report Test Status
message SetNodeStatusRequest {
    string node_name = 1;   // Worker identifies itself
    string node_ip = 2;     // Worker’s IP for master’s reference
    NodeStatus status = 3;  // Current node status (e.g., STOPPED, CANCELLED)
}

message SetNodeStatusResponse {
    bool success = 1;       // True if master processed the update, false if not
    string message = 2;     // Optional detail, e.g., "Status updated" or "Invalid node"
}

// Master to Worker: Cancel Test
message CancelTestRequest {
    // No fields needed; simple signal to cancel the test
}

message CancelTestResponse {
    bool success = 1;       // True if test cancelled, false if not
    NodeStatus status = 2;  // Updated node status (e.g., CANCELLED, FAILED)
}

// Request to get local node status
message GetNodeStatusRequest {
    // No fields needed; the request targets the local node running the service
}

// Response with the local node status
message GetNodeStatusResponse {
    NodeStatus status = 1;  // Current status of the node
}

// gRPC Service Definition
service NodeService {
    // Node registration
    rpc RegisterNode(NodeMetadata) returns (RegisterNodeResponse);

    // Master triggers test on worker
    rpc TriggerTest(TriggerTestRequest) returns (TriggerTestResponse);

    // Worker reports node status to master
    rpc SetNodeStatus(SetNodeStatusRequest) returns (SetNodeStatusResponse);

    // Master cancels test on worker
    rpc CancelTest(CancelTestRequest) returns (CancelTestResponse);

    // Query the status of the local node
    rpc GetNodeStatus(GetNodeStatusRequest) returns (GetNodeStatusResponse);
}
